
NEW VAL ADDED TO DATABASE
( 2.000*A) =   (1.000*D) +(2.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( -1.000*D) =   (-2.000*A) +(2.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( 2.000*B) =   (1.000*A) +(0.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( -1.000*A) =   (-2.000*B) +(0.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
4( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( -1.000*A) =   (1.000*B) +  (-1.000*C) +(0.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
4( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
5( -1.000*A) =   (1.000*B) +  (-1.000*C) +(0.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( -1.000*B) =   (1.000*A) +  (-1.000*C) +(0.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
4( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
5( -1.000*A) =   (1.000*B) +  (-1.000*C) +(0.000)
6( -1.000*B) =   (1.000*A) +  (-1.000*C) +(0.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( 1.000*D) =   (1.000*C) +  (1.000*B) +(-2.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
4( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
5( -1.000*A) =   (1.000*B) +  (-1.000*C) +(0.000)
6( -1.000*B) =   (1.000*A) +  (-1.000*C) +(0.000)
7( 1.000*D) =   (1.000*C) +  (1.000*B) +(-2.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( -1.000*C) =   (1.000*B) +  (-1.000*D) +(-2.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
4( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
5( -1.000*A) =   (1.000*B) +  (-1.000*C) +(0.000)
6( -1.000*B) =   (1.000*A) +  (-1.000*C) +(0.000)
7( 1.000*D) =   (1.000*C) +  (1.000*B) +(-2.000)
8( -1.000*C) =   (1.000*B) +  (-1.000*D) +(-2.000)
END---- Printing Alias Database

NEW VAL ADDED TO DATABASE
( -1.000*B) =   (1.000*C) +  (-1.000*D) +(-2.000)
START---- Printing Alias Database
0( 2.000*A) =   (1.000*D) +(2.000)
1( -1.000*D) =   (-2.000*A) +(2.000)
2( 2.000*B) =   (1.000*A) +(0.000)
3( -1.000*A) =   (-2.000*B) +(0.000)
4( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
5( -1.000*A) =   (1.000*B) +  (-1.000*C) +(0.000)
6( -1.000*B) =   (1.000*A) +  (-1.000*C) +(0.000)
7( 1.000*D) =   (1.000*C) +  (1.000*B) +(-2.000)
8( -1.000*C) =   (1.000*B) +  (-1.000*D) +(-2.000)
9( -1.000*B) =   (1.000*C) +  (-1.000*D) +(-2.000)
END---- Printing Alias Database
crucial data
"Parent Alias"
( 2.000*A) =   (1.000*D) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
D  =   (1.000*D)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 2.000*A) =   (1.000*D) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
D  =   (2.000*A)   +  -2
END---- Var Pseudo Name Item  0
good net change
"Parent Alias"
( 2.000*A) =   (1.000*D) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
D  =   (2.000*A)   +  -2
END---- Var Pseudo Name Item  0
[]main.VarPseudoNames{main.VarPseudoNames{PseudoNames:[][]string{[]string{"D"}, []string{"A"}, []string{"C", "B"}}, LoneNumberVals:[]float64{0, -2, -2}, ScaledDownMultipliers:[][]float64{[]float64{1}, []float64{2}, []float64{1, 1}}, ParentVar:"D"}}
[]int{1}
( 2.000*A) =   (1.000*D) +(2.000)
good net change2
ALIAS INPUT
( 2.000*A) =   (1.000*D) +(2.000)
main.Alias{LGenVar:[]main.GenVar{main.GenVar{Name:"A", Multiplier:2}}, RGenVar:[]main.GenVar{main.GenVar{Name:"D", Multiplier:1}}, LNum:[]float64{0}, RNum:[]float64{2}}
ALIAS SCALED DOWN
( 1.000*A) =   (0.500*D) +(1.000)
Pretty Printed Pseudo Name Selection
START---- Var Pseudo Name Item  0
D  =   (2.000*A)   +  -2
END---- Var Pseudo Name Item  0
CURSOR VALUE
[]int{1}
OUTPUT ALIAS
( 0.000*A) =   +(0.000)
OUTPUT ALIAS CLEANED
( 0.000*A) =   +(0.000)
error cleaning alias AddPseudoNameSubToDatabase
false
error error 
"Parent Alias"
( 2.000*A) =   (1.000*D) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
D  =   (1.000*C) (1.000*B)   +  -2
END---- Var Pseudo Name Item  0
cursor is maxed out
BEST SOLUTIONS
main.SolutionItem{BinaryCursor:"1", PseudoNamesChosenCursor:[]int{}, HighestNetChange:0}
CONCRETE SOLUTION ATTEMPT AND DATA VALID
{[] [] [] []}
false
not a concrete solution
{[] [] [] []}
crucial data
"Parent Alias"
( -1.000*D) =   (-2.000*A) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( -1.000*D) =   (-2.000*A) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (0.500*D)   +  1
END---- Var Pseudo Name Item  0
good net change
"Parent Alias"
( -1.000*D) =   (-2.000*A) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (0.500*D)   +  1
END---- Var Pseudo Name Item  0
[]main.VarPseudoNames{main.VarPseudoNames{PseudoNames:[][]string{[]string{"A"}, []string{"D"}, []string{"B"}, []string{"B", "C"}}, LoneNumberVals:[]float64{0, 1, -0, -0}, ScaledDownMultipliers:[][]float64{[]float64{1}, []float64{0.5}, []float64{2}, []float64{-1, 1}}, ParentVar:"A"}}
[]int{1}
( -1.000*D) =   (-2.000*A) +(2.000)
good net change2
ALIAS INPUT
( -1.000*D) =   (-2.000*A) +(2.000)
main.Alias{LGenVar:[]main.GenVar{main.GenVar{Name:"D", Multiplier:-1}}, RGenVar:[]main.GenVar{main.GenVar{Name:"A", Multiplier:-2}}, LNum:[]float64{0}, RNum:[]float64{2}}
ALIAS SCALED DOWN
( 1.000*D) =   (2.000*A) +(-2.000)
Pretty Printed Pseudo Name Selection
START---- Var Pseudo Name Item  0
A  =   (0.500*D)   +  1
END---- Var Pseudo Name Item  0
CURSOR VALUE
[]int{1}
OUTPUT ALIAS
( 0.000*D) =   +(0.000)
OUTPUT ALIAS CLEANED
( 0.000*D) =   +(0.000)
error cleaning alias AddPseudoNameSubToDatabase
false
error error 
"Parent Alias"
( -1.000*D) =   (-2.000*A) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (2.000*B)   +  -0
END---- Var Pseudo Name Item  0
"Parent Alias"
( -1.000*D) =   (-2.000*A) +(2.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (-1.000*B) (1.000*C)   +  -0
END---- Var Pseudo Name Item  0
cursor is maxed out
BEST SOLUTIONS
main.SolutionItem{BinaryCursor:"1", PseudoNamesChosenCursor:[]int{}, HighestNetChange:0}
CONCRETE SOLUTION ATTEMPT AND DATA VALID
{[] [] [] []}
false
not a concrete solution
{[] [] [] []}
crucial data
"Parent Alias"
( 2.000*B) =   (1.000*A) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 2.000*B) =   (1.000*A) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (0.500*D)   +  1
END---- Var Pseudo Name Item  0
"Parent Alias"
( 2.000*B) =   (1.000*A) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (2.000*B)   +  -0
END---- Var Pseudo Name Item  0
good net change
"Parent Alias"
( 2.000*B) =   (1.000*A) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (2.000*B)   +  -0
END---- Var Pseudo Name Item  0
[]main.VarPseudoNames{main.VarPseudoNames{PseudoNames:[][]string{[]string{"A"}, []string{"D"}, []string{"B"}, []string{"B", "C"}}, LoneNumberVals:[]float64{0, 1, -0, -0}, ScaledDownMultipliers:[][]float64{[]float64{1}, []float64{0.5}, []float64{2}, []float64{-1, 1}}, ParentVar:"A"}}
[]int{2}
( 2.000*B) =   (1.000*A) +(0.000)
good net change2
ALIAS INPUT
( 2.000*B) =   (1.000*A) +(0.000)
main.Alias{LGenVar:[]main.GenVar{main.GenVar{Name:"B", Multiplier:2}}, RGenVar:[]main.GenVar{main.GenVar{Name:"A", Multiplier:1}}, LNum:[]float64{0}, RNum:[]float64{0}}
ALIAS SCALED DOWN
( 1.000*B) =   (0.500*A) +(0.000)
Pretty Printed Pseudo Name Selection
START---- Var Pseudo Name Item  0
A  =   (2.000*B)   +  -0
END---- Var Pseudo Name Item  0
CURSOR VALUE
[]int{2}
OUTPUT ALIAS
( 0.000*B) =   +(0.000)
OUTPUT ALIAS CLEANED
( 0.000*B) =   +(0.000)
error cleaning alias AddPseudoNameSubToDatabase
false
error error 
"Parent Alias"
( 2.000*B) =   (1.000*A) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (-1.000*B) (1.000*C)   +  -0
END---- Var Pseudo Name Item  0
cursor is maxed out
BEST SOLUTIONS
main.SolutionItem{BinaryCursor:"1", PseudoNamesChosenCursor:[]int{}, HighestNetChange:0}
CONCRETE SOLUTION ATTEMPT AND DATA VALID
{[] [] [] []}
false
not a concrete solution
{[] [] [] []}
crucial data
"Parent Alias"
( -1.000*A) =   (-2.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (1.000*B)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( -1.000*A) =   (-2.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  0
good net change
"Parent Alias"
( -1.000*A) =   (-2.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  0
[]main.VarPseudoNames{main.VarPseudoNames{PseudoNames:[][]string{[]string{"B"}, []string{"A"}, []string{"A", "C"}, []string{"C", "D"}}, LoneNumberVals:[]float64{0, 0, -0, 2}, ScaledDownMultipliers:[][]float64{[]float64{1}, []float64{0.5}, []float64{-1, 1}, []float64{-1, 1}}, ParentVar:"B"}}
[]int{1}
( -1.000*A) =   (-2.000*B) +(0.000)
good net change2
ALIAS INPUT
( -1.000*A) =   (-2.000*B) +(0.000)
main.Alias{LGenVar:[]main.GenVar{main.GenVar{Name:"A", Multiplier:-1}}, RGenVar:[]main.GenVar{main.GenVar{Name:"B", Multiplier:-2}}, LNum:[]float64{0}, RNum:[]float64{0}}
ALIAS SCALED DOWN
( 1.000*A) =   (2.000*B) +(0.000)
Pretty Printed Pseudo Name Selection
START---- Var Pseudo Name Item  0
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  0
CURSOR VALUE
[]int{1}
OUTPUT ALIAS
( 0.000*A) =   +(0.000)
OUTPUT ALIAS CLEANED
( 0.000*A) =   +(0.000)
error cleaning alias AddPseudoNameSubToDatabase
false
error error 
"Parent Alias"
( -1.000*A) =   (-2.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (-1.000*A) (1.000*C)   +  -0
END---- Var Pseudo Name Item  0
"Parent Alias"
( -1.000*A) =   (-2.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (-1.000*C) (1.000*D)   +  2
END---- Var Pseudo Name Item  0
cursor is maxed out
BEST SOLUTIONS
main.SolutionItem{BinaryCursor:"1", PseudoNamesChosenCursor:[]int{}, HighestNetChange:0}
CONCRETE SOLUTION ATTEMPT AND DATA VALID
{[] [] [] []}
false
not a concrete solution
{[] [] [] []}
crucial data
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (1.000*B)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (-1.000*A) (1.000*C)   +  -0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
B  =   (-1.000*C) (1.000*D)   +  2
END---- Var Pseudo Name Item  0
cursor is maxed out
crucial data
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (0.500*D)   +  1
END---- Var Pseudo Name Item  0
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (2.000*B)   +  -0
END---- Var Pseudo Name Item  0
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (-1.000*B) (1.000*C)   +  -0
END---- Var Pseudo Name Item  0
cursor is maxed out
crucial data
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
"C"
Var Pseudo Name Pretty Printed START
Original Variable A

Pseudo Names For Var
0   [A]
1   [D]
2   [B]
3   [B C]

Scaled Multipliers
0   [1]
1   [0.5]
2   [2]
3   [-1 1]

Lone Number Vals
0   0
1   1
2   -0
3   -0
Var Pseudo Name Pretty Printed END
Var Pseudo Name Pretty Printed START
Original Variable B

Pseudo Names For Var
0   [B]
1   [A]
2   [A C]
3   [C D]

Scaled Multipliers
0   [1]
1   [0.5]
2   [-1 1]
3   [-1 1]

Lone Number Vals
0   0
1   0
2   -0
3   2
Var Pseudo Name Pretty Printed END
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
START---- Var Pseudo Name Item  1
B  =   (1.000*B)   +  0
END---- Var Pseudo Name Item  1
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
START---- Var Pseudo Name Item  1
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  1
good net change
"Parent Alias"
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
PseudoNames Chosen
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
START---- Var Pseudo Name Item  1
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  1
[]main.VarPseudoNames{main.VarPseudoNames{PseudoNames:[][]string{[]string{"A"}, []string{"D"}, []string{"B"}, []string{"B", "C"}}, LoneNumberVals:[]float64{0, 1, -0, -0}, ScaledDownMultipliers:[][]float64{[]float64{1}, []float64{0.5}, []float64{2}, []float64{-1, 1}}, ParentVar:"A"}, main.VarPseudoNames{PseudoNames:[][]string{[]string{"B"}, []string{"A"}, []string{"A", "C"}, []string{"C", "D"}}, LoneNumberVals:[]float64{0, 0, -0, 2}, ScaledDownMultipliers:[][]float64{[]float64{1}, []float64{0.5}, []float64{-1, 1}, []float64{-1, 1}}, ParentVar:"B"}}
[]int{0, 1}
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
good net change2
net change was positive
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
START---- Var Pseudo Name Item  1
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  1
ALIAS INPUT
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
main.Alias{LGenVar:[]main.GenVar{main.GenVar{Name:"C", Multiplier:1}}, RGenVar:[]main.GenVar{main.GenVar{Name:"A", Multiplier:1}, main.GenVar{Name:"B", Multiplier:1}}, LNum:[]float64{0}, RNum:[]float64{0}}
ALIAS SCALED DOWN
( 1.000*C) =   (1.000*A) +  (1.000*B) +(0.000)
Pretty Printed Pseudo Name Selection
START---- Var Pseudo Name Item  0
A  =   (1.000*A)   +  0
END---- Var Pseudo Name Item  0
START---- Var Pseudo Name Item  1
B  =   (0.500*A)   +  0
END---- Var Pseudo Name Item  1
CURSOR VALUE
[]int{0, 1}
OUTPUT ALIAS
( 1.000*C) =   (1.500*A) +(0.000)
OUTPUT ALIAS CLEANED
( 1.000*C) =   (1.500*A) +(0.000)
exit status 1
FAIL	_/C_/Users/logan/Documents/GoPrograms/PartialFractionDecomposition	0.030s
